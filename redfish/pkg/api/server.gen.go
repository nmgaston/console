// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /redfish/v1/)
	GetRedfishV1(c *gin.Context)

	// (GET /redfish/v1/$metadata)
	GetRedfishV1Metadata(c *gin.Context)

	// (GET /redfish/v1/Chassis)
	GetRedfishV1Chassis(c *gin.Context)

	// (GET /redfish/v1/Chassis/{ChassisId})
	GetRedfishV1ChassisChassisId(c *gin.Context, chassisId string)

	// (GET /redfish/v1/Managers)
	GetRedfishV1Managers(c *gin.Context)

	// (GET /redfish/v1/Managers/{ManagerId})
	GetRedfishV1ManagersManagerId(c *gin.Context, managerId string)

	// (GET /redfish/v1/Systems)
	GetRedfishV1Systems(c *gin.Context)

	// (GET /redfish/v1/Systems/{ComputerSystemId})
	GetRedfishV1SystemsComputerSystemId(c *gin.Context, computerSystemId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetRedfishV1 operation middleware
func (siw *ServerInterfaceWrapper) GetRedfishV1(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRedfishV1(c)
}

// GetRedfishV1Metadata operation middleware
func (siw *ServerInterfaceWrapper) GetRedfishV1Metadata(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRedfishV1Metadata(c)
}

// GetRedfishV1Chassis operation middleware
func (siw *ServerInterfaceWrapper) GetRedfishV1Chassis(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRedfishV1Chassis(c)
}

// GetRedfishV1ChassisChassisId operation middleware
func (siw *ServerInterfaceWrapper) GetRedfishV1ChassisChassisId(c *gin.Context) {

	var err error

	// ------------- Path parameter "ChassisId" -------------
	var chassisId string

	err = runtime.BindStyledParameterWithOptions("simple", "ChassisId", c.Param("ChassisId"), &chassisId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ChassisId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRedfishV1ChassisChassisId(c, chassisId)
}

// GetRedfishV1Managers operation middleware
func (siw *ServerInterfaceWrapper) GetRedfishV1Managers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRedfishV1Managers(c)
}

// GetRedfishV1ManagersManagerId operation middleware
func (siw *ServerInterfaceWrapper) GetRedfishV1ManagersManagerId(c *gin.Context) {

	var err error

	// ------------- Path parameter "ManagerId" -------------
	var managerId string

	err = runtime.BindStyledParameterWithOptions("simple", "ManagerId", c.Param("ManagerId"), &managerId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ManagerId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRedfishV1ManagersManagerId(c, managerId)
}

// GetRedfishV1Systems operation middleware
func (siw *ServerInterfaceWrapper) GetRedfishV1Systems(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRedfishV1Systems(c)
}

// GetRedfishV1SystemsComputerSystemId operation middleware
func (siw *ServerInterfaceWrapper) GetRedfishV1SystemsComputerSystemId(c *gin.Context) {

	var err error

	// ------------- Path parameter "ComputerSystemId" -------------
	var computerSystemId string

	err = runtime.BindStyledParameterWithOptions("simple", "ComputerSystemId", c.Param("ComputerSystemId"), &computerSystemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ComputerSystemId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRedfishV1SystemsComputerSystemId(c, computerSystemId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/redfish/v1/", wrapper.GetRedfishV1)
	router.GET(options.BaseURL+"/redfish/v1/$metadata", wrapper.GetRedfishV1Metadata)
	router.GET(options.BaseURL+"/redfish/v1/Chassis", wrapper.GetRedfishV1Chassis)
	router.GET(options.BaseURL+"/redfish/v1/Chassis/:ChassisId", wrapper.GetRedfishV1ChassisChassisId)
	router.GET(options.BaseURL+"/redfish/v1/Managers", wrapper.GetRedfishV1Managers)
	router.GET(options.BaseURL+"/redfish/v1/Managers/:ManagerId", wrapper.GetRedfishV1ManagersManagerId)
	router.GET(options.BaseURL+"/redfish/v1/Systems", wrapper.GetRedfishV1Systems)
	router.GET(options.BaseURL+"/redfish/v1/Systems/:ComputerSystemId", wrapper.GetRedfishV1SystemsComputerSystemId)
}

type GetRedfishV1RequestObject struct {
}

type GetRedfishV1ResponseObject interface {
	VisitGetRedfishV1Response(w http.ResponseWriter) error
}

type GetRedfishV1200JSONResponse ServiceRootServiceRoot

func (response GetRedfishV1200JSONResponse) VisitGetRedfishV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRedfishV1defaultJSONResponse struct {
	Body       RedfishError
	StatusCode int
}

func (response GetRedfishV1defaultJSONResponse) VisitGetRedfishV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetRedfishV1MetadataRequestObject struct {
}

type GetRedfishV1MetadataResponseObject interface {
	VisitGetRedfishV1MetadataResponse(w http.ResponseWriter) error
}

type GetRedfishV1Metadata200ApplicationxmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetRedfishV1Metadata200ApplicationxmlResponse) VisitGetRedfishV1MetadataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/xml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetRedfishV1MetadatadefaultJSONResponse struct {
	Body       RedfishError
	StatusCode int
}

func (response GetRedfishV1MetadatadefaultJSONResponse) VisitGetRedfishV1MetadataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetRedfishV1ChassisRequestObject struct {
}

type GetRedfishV1ChassisResponseObject interface {
	VisitGetRedfishV1ChassisResponse(w http.ResponseWriter) error
}

type GetRedfishV1Chassis200JSONResponse ChassisCollectionChassisCollection

func (response GetRedfishV1Chassis200JSONResponse) VisitGetRedfishV1ChassisResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRedfishV1ChassisdefaultJSONResponse struct {
	Body       RedfishError
	StatusCode int
}

func (response GetRedfishV1ChassisdefaultJSONResponse) VisitGetRedfishV1ChassisResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetRedfishV1ChassisChassisIdRequestObject struct {
	ChassisId string `json:"ChassisId"`
}

type GetRedfishV1ChassisChassisIdResponseObject interface {
	VisitGetRedfishV1ChassisChassisIdResponse(w http.ResponseWriter) error
}

type GetRedfishV1ChassisChassisId200JSONResponse ChassisChassis

func (response GetRedfishV1ChassisChassisId200JSONResponse) VisitGetRedfishV1ChassisChassisIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRedfishV1ChassisChassisIddefaultJSONResponse struct {
	Body       RedfishError
	StatusCode int
}

func (response GetRedfishV1ChassisChassisIddefaultJSONResponse) VisitGetRedfishV1ChassisChassisIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetRedfishV1ManagersRequestObject struct {
}

type GetRedfishV1ManagersResponseObject interface {
	VisitGetRedfishV1ManagersResponse(w http.ResponseWriter) error
}

type GetRedfishV1Managers200JSONResponse ManagerCollectionManagerCollection

func (response GetRedfishV1Managers200JSONResponse) VisitGetRedfishV1ManagersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRedfishV1ManagersdefaultJSONResponse struct {
	Body       RedfishError
	StatusCode int
}

func (response GetRedfishV1ManagersdefaultJSONResponse) VisitGetRedfishV1ManagersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetRedfishV1ManagersManagerIdRequestObject struct {
	ManagerId string `json:"ManagerId"`
}

type GetRedfishV1ManagersManagerIdResponseObject interface {
	VisitGetRedfishV1ManagersManagerIdResponse(w http.ResponseWriter) error
}

type GetRedfishV1ManagersManagerId200JSONResponse ManagerManager

func (response GetRedfishV1ManagersManagerId200JSONResponse) VisitGetRedfishV1ManagersManagerIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRedfishV1ManagersManagerIddefaultJSONResponse struct {
	Body       RedfishError
	StatusCode int
}

func (response GetRedfishV1ManagersManagerIddefaultJSONResponse) VisitGetRedfishV1ManagersManagerIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetRedfishV1SystemsRequestObject struct {
}

type GetRedfishV1SystemsResponseObject interface {
	VisitGetRedfishV1SystemsResponse(w http.ResponseWriter) error
}

type GetRedfishV1Systems200JSONResponse ComputerSystemCollectionComputerSystemCollection

func (response GetRedfishV1Systems200JSONResponse) VisitGetRedfishV1SystemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRedfishV1SystemsdefaultJSONResponse struct {
	Body       RedfishError
	StatusCode int
}

func (response GetRedfishV1SystemsdefaultJSONResponse) VisitGetRedfishV1SystemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetRedfishV1SystemsComputerSystemIdRequestObject struct {
	ComputerSystemId string `json:"ComputerSystemId"`
}

type GetRedfishV1SystemsComputerSystemIdResponseObject interface {
	VisitGetRedfishV1SystemsComputerSystemIdResponse(w http.ResponseWriter) error
}

type GetRedfishV1SystemsComputerSystemId200JSONResponse ComputerSystemComputerSystem

func (response GetRedfishV1SystemsComputerSystemId200JSONResponse) VisitGetRedfishV1SystemsComputerSystemIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRedfishV1SystemsComputerSystemIddefaultJSONResponse struct {
	Body       RedfishError
	StatusCode int
}

func (response GetRedfishV1SystemsComputerSystemIddefaultJSONResponse) VisitGetRedfishV1SystemsComputerSystemIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /redfish/v1/)
	GetRedfishV1(ctx context.Context, request GetRedfishV1RequestObject) (GetRedfishV1ResponseObject, error)

	// (GET /redfish/v1/$metadata)
	GetRedfishV1Metadata(ctx context.Context, request GetRedfishV1MetadataRequestObject) (GetRedfishV1MetadataResponseObject, error)

	// (GET /redfish/v1/Chassis)
	GetRedfishV1Chassis(ctx context.Context, request GetRedfishV1ChassisRequestObject) (GetRedfishV1ChassisResponseObject, error)

	// (GET /redfish/v1/Chassis/{ChassisId})
	GetRedfishV1ChassisChassisId(ctx context.Context, request GetRedfishV1ChassisChassisIdRequestObject) (GetRedfishV1ChassisChassisIdResponseObject, error)

	// (GET /redfish/v1/Managers)
	GetRedfishV1Managers(ctx context.Context, request GetRedfishV1ManagersRequestObject) (GetRedfishV1ManagersResponseObject, error)

	// (GET /redfish/v1/Managers/{ManagerId})
	GetRedfishV1ManagersManagerId(ctx context.Context, request GetRedfishV1ManagersManagerIdRequestObject) (GetRedfishV1ManagersManagerIdResponseObject, error)

	// (GET /redfish/v1/Systems)
	GetRedfishV1Systems(ctx context.Context, request GetRedfishV1SystemsRequestObject) (GetRedfishV1SystemsResponseObject, error)

	// (GET /redfish/v1/Systems/{ComputerSystemId})
	GetRedfishV1SystemsComputerSystemId(ctx context.Context, request GetRedfishV1SystemsComputerSystemIdRequestObject) (GetRedfishV1SystemsComputerSystemIdResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetRedfishV1 operation middleware
func (sh *strictHandler) GetRedfishV1(ctx *gin.Context) {
	var request GetRedfishV1RequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRedfishV1(ctx, request.(GetRedfishV1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRedfishV1")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRedfishV1ResponseObject); ok {
		if err := validResponse.VisitGetRedfishV1Response(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRedfishV1Metadata operation middleware
func (sh *strictHandler) GetRedfishV1Metadata(ctx *gin.Context) {
	var request GetRedfishV1MetadataRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRedfishV1Metadata(ctx, request.(GetRedfishV1MetadataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRedfishV1Metadata")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRedfishV1MetadataResponseObject); ok {
		if err := validResponse.VisitGetRedfishV1MetadataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRedfishV1Chassis operation middleware
func (sh *strictHandler) GetRedfishV1Chassis(ctx *gin.Context) {
	var request GetRedfishV1ChassisRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRedfishV1Chassis(ctx, request.(GetRedfishV1ChassisRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRedfishV1Chassis")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRedfishV1ChassisResponseObject); ok {
		if err := validResponse.VisitGetRedfishV1ChassisResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRedfishV1ChassisChassisId operation middleware
func (sh *strictHandler) GetRedfishV1ChassisChassisId(ctx *gin.Context, chassisId string) {
	var request GetRedfishV1ChassisChassisIdRequestObject

	request.ChassisId = chassisId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRedfishV1ChassisChassisId(ctx, request.(GetRedfishV1ChassisChassisIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRedfishV1ChassisChassisId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRedfishV1ChassisChassisIdResponseObject); ok {
		if err := validResponse.VisitGetRedfishV1ChassisChassisIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRedfishV1Managers operation middleware
func (sh *strictHandler) GetRedfishV1Managers(ctx *gin.Context) {
	var request GetRedfishV1ManagersRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRedfishV1Managers(ctx, request.(GetRedfishV1ManagersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRedfishV1Managers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRedfishV1ManagersResponseObject); ok {
		if err := validResponse.VisitGetRedfishV1ManagersResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRedfishV1ManagersManagerId operation middleware
func (sh *strictHandler) GetRedfishV1ManagersManagerId(ctx *gin.Context, managerId string) {
	var request GetRedfishV1ManagersManagerIdRequestObject

	request.ManagerId = managerId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRedfishV1ManagersManagerId(ctx, request.(GetRedfishV1ManagersManagerIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRedfishV1ManagersManagerId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRedfishV1ManagersManagerIdResponseObject); ok {
		if err := validResponse.VisitGetRedfishV1ManagersManagerIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRedfishV1Systems operation middleware
func (sh *strictHandler) GetRedfishV1Systems(ctx *gin.Context) {
	var request GetRedfishV1SystemsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRedfishV1Systems(ctx, request.(GetRedfishV1SystemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRedfishV1Systems")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRedfishV1SystemsResponseObject); ok {
		if err := validResponse.VisitGetRedfishV1SystemsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRedfishV1SystemsComputerSystemId operation middleware
func (sh *strictHandler) GetRedfishV1SystemsComputerSystemId(ctx *gin.Context, computerSystemId string) {
	var request GetRedfishV1SystemsComputerSystemIdRequestObject

	request.ComputerSystemId = computerSystemId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRedfishV1SystemsComputerSystemId(ctx, request.(GetRedfishV1SystemsComputerSystemIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRedfishV1SystemsComputerSystemId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRedfishV1SystemsComputerSystemIdResponseObject); ok {
		if err := validResponse.VisitGetRedfishV1SystemsComputerSystemIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
