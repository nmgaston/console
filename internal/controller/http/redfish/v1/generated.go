// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package v1

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BasicAuthScopes  = "BasicAuth.Scopes"
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for ChassisChassisType.
const (
	Blade            ChassisChassisType = "Blade"
	Card             ChassisChassisType = "Card"
	Cartridge        ChassisChassisType = "Cartridge"
	Component        ChassisChassisType = "Component"
	Drawer           ChassisChassisType = "Drawer"
	Enclosure        ChassisChassisType = "Enclosure"
	Expansion        ChassisChassisType = "Expansion"
	IPBasedDrive     ChassisChassisType = "IPBasedDrive"
	Module           ChassisChassisType = "Module"
	Other            ChassisChassisType = "Other"
	Pod              ChassisChassisType = "Pod"
	Rack             ChassisChassisType = "Rack"
	RackGroup        ChassisChassisType = "RackGroup"
	RackMount        ChassisChassisType = "RackMount"
	Row              ChassisChassisType = "Row"
	Shelf            ChassisChassisType = "Shelf"
	Sidecar          ChassisChassisType = "Sidecar"
	Sled             ChassisChassisType = "Sled"
	StandAlone       ChassisChassisType = "StandAlone"
	StorageEnclosure ChassisChassisType = "StorageEnclosure"
	Zone             ChassisChassisType = "Zone"
)

// Defines values for ComputerSystemPowerState.
const (
	Off         ComputerSystemPowerState = "Off"
	On          ComputerSystemPowerState = "On"
	PoweringOff ComputerSystemPowerState = "PoweringOff"
	PoweringOn  ComputerSystemPowerState = "PoweringOn"
)

// Defines values for ComputerSystemSystemType.
const (
	OS                    ComputerSystemSystemType = "OS"
	Physical              ComputerSystemSystemType = "Physical"
	PhysicallyPartitioned ComputerSystemSystemType = "PhysicallyPartitioned"
	Virtual               ComputerSystemSystemType = "Virtual"
	VirtuallyPartitioned  ComputerSystemSystemType = "VirtuallyPartitioned"
)

// Defines values for ManagerManagerType.
const (
	AuxiliaryController  ManagerManagerType = "AuxiliaryController"
	BMC                  ManagerManagerType = "BMC"
	EnclosureManager     ManagerManagerType = "EnclosureManager"
	ManagementController ManagerManagerType = "ManagementController"
	RackManager          ManagerManagerType = "RackManager"
	Service              ManagerManagerType = "Service"
)

// Defines values for StatusHealth.
const (
	Critical StatusHealth = "Critical"
	OK       StatusHealth = "OK"
	Warning  StatusHealth = "Warning"
)

// Defines values for StatusState.
const (
	Absent             StatusState = "Absent"
	Deferring          StatusState = "Deferring"
	Disabled           StatusState = "Disabled"
	Enabled            StatusState = "Enabled"
	InTest             StatusState = "InTest"
	Quiesced           StatusState = "Quiesced"
	StandbyOffline     StatusState = "StandbyOffline"
	StandbySpare       StatusState = "StandbySpare"
	Starting           StatusState = "Starting"
	UnavailableOffline StatusState = "UnavailableOffline"
	Updating           StatusState = "Updating"
)

// Chassis defines model for Chassis.
type Chassis struct {
	// OdataContext The OData context annotation for this object
	OdataContext *ODataContext `json:"@odata.context,omitempty"`

	// OdataID The URI of the resource
	OdataID ODataID `json:"@odata.id"`

	// OdataType The OData type annotation for this object
	OdataType ODataType `json:"@odata.type"`

	// ChassisType The type of physical form factor of the chassis
	ChassisType *ChassisChassisType `json:"ChassisType,omitempty"`

	// Description Description of this resource
	Description *string `json:"Description,omitempty"`

	// Id The unique identifier for this resource
	Id string `json:"Id"`

	// Manufacturer The manufacturer of this chassis
	Manufacturer *string `json:"Manufacturer,omitempty"`

	// Model The model number of the chassis
	Model *string `json:"Model,omitempty"`

	// Name The name of the resource
	Name string `json:"Name"`

	// SerialNumber The serial number of the chassis
	SerialNumber *string `json:"SerialNumber,omitempty"`
	Status       *Status `json:"Status,omitempty"`
}

// ChassisChassisType The type of physical form factor of the chassis
type ChassisChassisType string

// ChassisCollection defines model for ChassisCollection.
type ChassisCollection = Collection

// Collection defines model for Collection.
type Collection struct {
	// OdataContext The OData context annotation for this object
	OdataContext *ODataContext `json:"@odata.context,omitempty"`

	// OdataID The URI of the resource
	OdataID ODataID `json:"@odata.id"`

	// OdataType The OData type annotation for this object
	OdataType ODataType `json:"@odata.type"`

	// Description Description of this collection
	Description *string `json:"Description,omitempty"`
	Members     []struct {
		// OdataID The URI of the resource
		OdataID *ODataID `json:"@odata.id,omitempty"`
	} `json:"Members"`

	// MembersOdataCount The number of members in this collection
	MembersOdataCount int `json:"Members@odata.count"`

	// Name The name of the collection
	Name string `json:"Name"`
}

// ComputerSystem defines model for ComputerSystem.
type ComputerSystem struct {
	// OdataContext The OData context annotation for this object
	OdataContext *ODataContext `json:"@odata.context,omitempty"`

	// OdataID The URI of the resource
	OdataID ODataID `json:"@odata.id"`

	// OdataType The OData type annotation for this object
	OdataType ODataType `json:"@odata.type"`

	// Description Description of this resource
	Description *string `json:"Description,omitempty"`

	// Id The unique identifier for this resource
	Id string `json:"Id"`

	// Manufacturer The manufacturer of this system
	Manufacturer *string `json:"Manufacturer,omitempty"`

	// Model The model number of this system
	Model *string `json:"Model,omitempty"`

	// Name The name of the resource
	Name string `json:"Name"`

	// PowerState The current power state of the system
	PowerState *ComputerSystemPowerState `json:"PowerState,omitempty"`

	// SerialNumber The serial number of this system
	SerialNumber *string `json:"SerialNumber,omitempty"`
	Status       *Status `json:"Status,omitempty"`

	// SystemType The type of computer system
	SystemType *ComputerSystemSystemType `json:"SystemType,omitempty"`
}

// ComputerSystemPowerState The current power state of the system
type ComputerSystemPowerState string

// ComputerSystemSystemType The type of computer system
type ComputerSystemSystemType string

// ComputerSystemCollection defines model for ComputerSystemCollection.
type ComputerSystemCollection = Collection

// Error defines model for Error.
type Error struct {
	Error *struct {
		MessageExtendedInfo *[]struct {
			Message    *string `json:"Message,omitempty"`
			MessageId  *string `json:"MessageId,omitempty"`
			Resolution *string `json:"Resolution,omitempty"`
			Severity   *string `json:"Severity,omitempty"`
		} `json:"@Message.ExtendedInfo,omitempty"`

		// Code A string that identifies the kind of error that occurred
		Code *string `json:"code,omitempty"`

		// Message A human-readable error message
		Message *string `json:"message,omitempty"`
	} `json:"error,omitempty"`
}

// Manager defines model for Manager.
type Manager struct {
	// OdataContext The OData context annotation for this object
	OdataContext *ODataContext `json:"@odata.context,omitempty"`

	// OdataID The URI of the resource
	OdataID ODataID `json:"@odata.id"`

	// OdataType The OData type annotation for this object
	OdataType ODataType `json:"@odata.type"`

	// Description Description of this resource
	Description *string `json:"Description,omitempty"`

	// FirmwareVersion The firmware version of this manager
	FirmwareVersion *string `json:"FirmwareVersion,omitempty"`

	// Id The unique identifier for this resource
	Id string `json:"Id"`

	// ManagerType The type of manager
	ManagerType *ManagerManagerType `json:"ManagerType,omitempty"`

	// Model The model information of this manager
	Model *string `json:"Model,omitempty"`

	// Name The name of the resource
	Name   string  `json:"Name"`
	Status *Status `json:"Status,omitempty"`
}

// ManagerManagerType The type of manager
type ManagerManagerType string

// ManagerCollection defines model for ManagerCollection.
type ManagerCollection = Collection

// ODataContext The OData context annotation for this object
type ODataContext = string

// ODataId The URI of the resource
type ODataID = string

// ODataType The OData type annotation for this object
type ODataType = string

// Resource defines model for Resource.
type Resource struct {
	// OdataContext The OData context annotation for this object
	OdataContext *ODataContext `json:"@odata.context,omitempty"`

	// OdataID The URI of the resource
	OdataID ODataID `json:"@odata.id"`

	// OdataType The OData type annotation for this object
	OdataType ODataType `json:"@odata.type"`

	// Description Description of this resource
	Description *string `json:"Description,omitempty"`

	// Id The unique identifier for this resource
	Id string `json:"Id"`

	// Name The name of the resource
	Name string `json:"Name"`
}

// ServiceRoot defines model for ServiceRoot.
type ServiceRoot struct {
	// OdataContext The OData context annotation for this object
	OdataContext *ODataContext `json:"@odata.context,omitempty"`

	// OdataID The URI of the resource
	OdataID ODataID `json:"@odata.id"`

	// OdataType The OData type annotation for this object
	OdataType ODataType `json:"@odata.type"`
	Chassis   *struct {
		// OdataID The URI of the resource
		OdataID *ODataID `json:"@odata.id,omitempty"`
	} `json:"Chassis,omitempty"`

	// Description Description of this resource
	Description *string `json:"Description,omitempty"`

	// Id The unique identifier for this resource
	Id       string `json:"Id"`
	Managers *struct {
		// OdataID The URI of the resource
		OdataID *ODataID `json:"@odata.id,omitempty"`
	} `json:"Managers,omitempty"`

	// Name The name of the resource
	Name string `json:"Name"`

	// RedfishVersion The version of the Redfish service
	RedfishVersion *string `json:"RedfishVersion,omitempty"`
	Systems        *struct {
		// OdataID The URI of the resource
		OdataID *ODataID `json:"@odata.id,omitempty"`
	} `json:"Systems,omitempty"`

	// UUID Unique identifier for this service
	UUID *openapi_types.UUID `json:"UUID,omitempty"`
}

// Status defines model for Status.
type Status struct {
	// Health The health state of this resource
	Health *StatusHealth `json:"Health,omitempty"`

	// State The state of the resource
	State *StatusState `json:"State,omitempty"`
}

// StatusHealth The health state of this resource
type StatusHealth string

// StatusState The state of the resource
type StatusState string

// InternalServerError defines model for InternalServerError.
type InternalServerError = Error

// NotFound defines model for NotFound.
type NotFound = Error

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Redfish Service Root
	// (GET /)
	GetServiceRoot(c *gin.Context)
	// Get Chassis Collection
	// (GET /Chassis)
	GetChassisCollection(c *gin.Context)
	// Get Chassis
	// (GET /Chassis/{chassisId})
	GetChassis(c *gin.Context, chassisId string)
	// Get Managers Collection
	// (GET /Managers)
	GetManagersCollection(c *gin.Context)
	// Get Manager
	// (GET /Managers/{managerId})
	GetManager(c *gin.Context, managerId string)
	// Get Computer Systems Collection
	// (GET /Systems)
	GetSystemsCollection(c *gin.Context)
	// Get Computer System
	// (GET /Systems/{systemId})
	GetSystem(c *gin.Context, systemId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetServiceRoot operation middleware
func (siw *ServerInterfaceWrapper) GetServiceRoot(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetServiceRoot(c)
}

// GetChassisCollection operation middleware
func (siw *ServerInterfaceWrapper) GetChassisCollection(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChassisCollection(c)
}

// GetChassis operation middleware
func (siw *ServerInterfaceWrapper) GetChassis(c *gin.Context) {

	var err error

	// ------------- Path parameter "chassisId" -------------
	var chassisId string

	err = runtime.BindStyledParameterWithOptions("simple", "chassisId", c.Param("chassisId"), &chassisId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter chassisId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BasicAuthScopes, []string{})

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetChassis(c, chassisId)
}

// GetManagersCollection operation middleware
func (siw *ServerInterfaceWrapper) GetManagersCollection(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetManagersCollection(c)
}

// GetManager operation middleware
func (siw *ServerInterfaceWrapper) GetManager(c *gin.Context) {

	var err error

	// ------------- Path parameter "managerId" -------------
	var managerId string

	err = runtime.BindStyledParameterWithOptions("simple", "managerId", c.Param("managerId"), &managerId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter managerId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BasicAuthScopes, []string{})

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetManager(c, managerId)
}

// GetSystemsCollection operation middleware
func (siw *ServerInterfaceWrapper) GetSystemsCollection(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSystemsCollection(c)
}

// GetSystem operation middleware
func (siw *ServerInterfaceWrapper) GetSystem(c *gin.Context) {

	var err error

	// ------------- Path parameter "systemId" -------------
	var systemId string

	err = runtime.BindStyledParameterWithOptions("simple", "systemId", c.Param("systemId"), &systemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter systemId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BasicAuthScopes, []string{})

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSystem(c, systemId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/", wrapper.GetServiceRoot)
	router.GET(options.BaseURL+"/Chassis", wrapper.GetChassisCollection)
	router.GET(options.BaseURL+"/Chassis/:chassisId", wrapper.GetChassis)
	router.GET(options.BaseURL+"/Managers", wrapper.GetManagersCollection)
	router.GET(options.BaseURL+"/Managers/:managerId", wrapper.GetManager)
	router.GET(options.BaseURL+"/Systems", wrapper.GetSystemsCollection)
	router.GET(options.BaseURL+"/Systems/:systemId", wrapper.GetSystem)
}
