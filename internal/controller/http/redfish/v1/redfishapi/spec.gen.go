// Package redfishapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package redfishapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
