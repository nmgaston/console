// Package redfishapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package redfishapi

import (
	"encoding/json"
	"time"

	"github.com/oapi-codegen/runtime"
)

// Defines values for ActionInfoParameterTypes.
const (
	Boolean     ActionInfoParameterTypes = "Boolean"
	Number      ActionInfoParameterTypes = "Number"
	NumberArray ActionInfoParameterTypes = "NumberArray"
	Object      ActionInfoParameterTypes = "Object"
	ObjectArray ActionInfoParameterTypes = "ObjectArray"
	String      ActionInfoParameterTypes = "String"
	StringArray ActionInfoParameterTypes = "StringArray"
)

// Defines values for ChassisChassisType.
const (
	Blade            ChassisChassisType = "Blade"
	Card             ChassisChassisType = "Card"
	Cartridge        ChassisChassisType = "Cartridge"
	Component        ChassisChassisType = "Component"
	Drawer           ChassisChassisType = "Drawer"
	Enclosure        ChassisChassisType = "Enclosure"
	Expansion        ChassisChassisType = "Expansion"
	HeatExchanger    ChassisChassisType = "HeatExchanger"
	IPBasedDrive     ChassisChassisType = "IPBasedDrive"
	ImmersionTank    ChassisChassisType = "ImmersionTank"
	Module           ChassisChassisType = "Module"
	Other            ChassisChassisType = "Other"
	Pod              ChassisChassisType = "Pod"
	PowerStrip       ChassisChassisType = "PowerStrip"
	Rack             ChassisChassisType = "Rack"
	RackGroup        ChassisChassisType = "RackGroup"
	RackMount        ChassisChassisType = "RackMount"
	Row              ChassisChassisType = "Row"
	Shelf            ChassisChassisType = "Shelf"
	Sidecar          ChassisChassisType = "Sidecar"
	Sled             ChassisChassisType = "Sled"
	StandAlone       ChassisChassisType = "StandAlone"
	StorageEnclosure ChassisChassisType = "StorageEnclosure"
	Zone             ChassisChassisType = "Zone"
)

// Defines values for ComputerSystemSystemType.
const (
	Composed              ComputerSystemSystemType = "Composed"
	DPU                   ComputerSystemSystemType = "DPU"
	OS                    ComputerSystemSystemType = "OS"
	Physical              ComputerSystemSystemType = "Physical"
	PhysicallyPartitioned ComputerSystemSystemType = "PhysicallyPartitioned"
	Virtual               ComputerSystemSystemType = "Virtual"
	VirtuallyPartitioned  ComputerSystemSystemType = "VirtuallyPartitioned"
)

// Defines values for ManagerManagerType.
const (
	AuxiliaryController  ManagerManagerType = "AuxiliaryController"
	BMC                  ManagerManagerType = "BMC"
	EnclosureManager     ManagerManagerType = "EnclosureManager"
	FabricManager        ManagerManagerType = "FabricManager"
	ManagementController ManagerManagerType = "ManagementController"
	RackManager          ManagerManagerType = "RackManager"
	Service              ManagerManagerType = "Service"
)

// Defines values for ResolutionStepResolutionType.
const (
	ResolutionStepResolutionTypeCollectDiagnosticData ResolutionStepResolutionType = "CollectDiagnosticData"
	ResolutionStepResolutionTypeContactVendor         ResolutionStepResolutionType = "ContactVendor"
	ResolutionStepResolutionTypeFirmwareUpdate        ResolutionStepResolutionType = "FirmwareUpdate"
	ResolutionStepResolutionTypeOEM                   ResolutionStepResolutionType = "OEM"
	ResolutionStepResolutionTypePowerCycle            ResolutionStepResolutionType = "PowerCycle"
	ResolutionStepResolutionTypeReplaceComponent      ResolutionStepResolutionType = "ReplaceComponent"
	ResolutionStepResolutionTypeReset                 ResolutionStepResolutionType = "Reset"
	ResolutionStepResolutionTypeResetToDefaults       ResolutionStepResolutionType = "ResetToDefaults"
)

// Defines values for ResourceConditionType.
const (
	Alert         ResourceConditionType = "Alert"
	Informational ResourceConditionType = "Informational"
	Subsystem     ResourceConditionType = "Subsystem"
)

// Defines values for ResourceHealth.
const (
	Critical ResourceHealth = "Critical"
	OK       ResourceHealth = "OK"
	Warning  ResourceHealth = "Warning"
)

// Defines values for ResourcePowerState.
const (
	Off         ResourcePowerState = "Off"
	On          ResourcePowerState = "On"
	Paused      ResourcePowerState = "Paused"
	PoweringOff ResourcePowerState = "PoweringOff"
	PoweringOn  ResourcePowerState = "PoweringOn"
)

// Defines values for ResourceResetType.
const (
	ResourceResetTypeForceOff         ResourceResetType = "ForceOff"
	ResourceResetTypeForceOn          ResourceResetType = "ForceOn"
	ResourceResetTypeForceRestart     ResourceResetType = "ForceRestart"
	ResourceResetTypeFullPowerCycle   ResourceResetType = "FullPowerCycle"
	ResourceResetTypeGracefulRestart  ResourceResetType = "GracefulRestart"
	ResourceResetTypeGracefulShutdown ResourceResetType = "GracefulShutdown"
	ResourceResetTypeNmi              ResourceResetType = "Nmi"
	ResourceResetTypeOn               ResourceResetType = "On"
	ResourceResetTypePause            ResourceResetType = "Pause"
	ResourceResetTypePowerCycle       ResourceResetType = "PowerCycle"
	ResourceResetTypePushPowerButton  ResourceResetType = "PushPowerButton"
	ResourceResetTypeResume           ResourceResetType = "Resume"
	ResourceResetTypeSuspend          ResourceResetType = "Suspend"
)

// Defines values for ResourceState.
const (
	Absent             ResourceState = "Absent"
	Deferring          ResourceState = "Deferring"
	Degraded           ResourceState = "Degraded"
	Disabled           ResourceState = "Disabled"
	Enabled            ResourceState = "Enabled"
	InTest             ResourceState = "InTest"
	Qualified          ResourceState = "Qualified"
	Quiesced           ResourceState = "Quiesced"
	StandbyOffline     ResourceState = "StandbyOffline"
	StandbySpare       ResourceState = "StandbySpare"
	Starting           ResourceState = "Starting"
	UnavailableOffline ResourceState = "UnavailableOffline"
	Updating           ResourceState = "Updating"
)

// ActionInfoParameterTypes defines model for ActionInfo_ParameterTypes.
type ActionInfoParameterTypes string

// ActionInfoParameters The information about a parameter included in a Redfish action for this resource.
type ActionInfoParameters struct {
	// AllowableNumbers The allowable numeric values or duration values, inclusive ranges of values, and incremental step values for this parameter as applied to this action target.
	AllowableNumbers *[]string `json:"AllowableNumbers,omitempty"`

	// AllowablePattern The allowable pattern for this parameter as applied to this action target.
	AllowablePattern *string `json:"AllowablePattern"`

	// AllowableValueDescriptions Descriptions of allowable values for this parameter.
	AllowableValueDescriptions *[]string `json:"AllowableValueDescriptions,omitempty"`

	// AllowableValues The allowable values for this parameter as applied to this action target.
	AllowableValues *[]string `json:"AllowableValues,omitempty"`

	// ArraySizeMaximum The maximum number of array elements allowed for this parameter.
	ArraySizeMaximum *int64 `json:"ArraySizeMaximum"`

	// ArraySizeMinimum The minimum number of array elements required for this parameter.
	ArraySizeMinimum *int64 `json:"ArraySizeMinimum"`

	// DataType The JSON property type for this parameter.
	DataType *ActionInfoParameters_DataType `json:"DataType,omitempty"`

	// DefaultValue The default value for this parameter.
	DefaultValue *string `json:"DefaultValue"`

	// MaximumValue The maximum supported value for this parameter.
	MaximumValue *float32 `json:"MaximumValue"`

	// MinimumValue The minimum supported value for this parameter.
	MinimumValue *float32 `json:"MinimumValue"`

	// Name The name of the parameter for this action.
	Name *string `json:"Name,omitempty"`

	// NoDefaultValue Indicates that there is no default value for this parameter.
	NoDefaultValue *bool `json:"NoDefaultValue"`

	// ObjectDataType The data type of an object-based parameter.
	ObjectDataType *string `json:"ObjectDataType"`

	// Required An indication of whether the parameter is required to complete this action.
	Required *bool `json:"Required,omitempty"`
}

// ActionInfoParametersDataType1 defines model for .
type ActionInfoParametersDataType1 = interface{}

// ActionInfoParameters_DataType The JSON property type for this parameter.
type ActionInfoParameters_DataType struct {
	union json.RawMessage
}

// ChassisCollectionChassisCollection The collection of `Chassis` resource instances.
type ChassisCollectionChassisCollection struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType   *OdataV4Type                                    `json:"@odata.type,omitempty"`
	Description *ChassisCollectionChassisCollection_Description `json:"Description,omitempty"`

	// Members The members of this collection.
	Members *[]OdataV4IdRef `json:"Members,omitempty"`

	// MembersOdataCount The number of items in a collection.
	MembersOdataCount *OdataV4Count `json:"Members@odata.count,omitempty"`

	// MembersOdataNextLink The URI to the resource containing the next set of partial members.
	MembersOdataNextLink *OdataV4NextLink `json:"Members@odata.nextLink,omitempty"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`
}

// ChassisCollectionChassisCollectionDescription1 defines model for .
type ChassisCollectionChassisCollectionDescription1 = interface{}

// ChassisCollectionChassisCollection_Description defines model for ChassisCollectionChassisCollection.Description.
type ChassisCollectionChassisCollection_Description struct {
	union json.RawMessage
}

// ChassisChassis The `Chassis` schema represents the physical components of a system.  This resource represents the sheet-metal confined spaces and logical zones such as racks, enclosures, chassis and all other containers.  Subsystems, such as sensors, that operate outside of a system's data plane are linked either directly or indirectly through this resource.  A subsystem that operates outside of a system's data plane are not accessible to software that runs on the system.  It also describes the location, such as a slot, socket, or bay, where a unit can be installed, by populating a resource instance with an absent state if a unit is not present.
type ChassisChassis struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType   *OdataV4Type       `json:"@odata.type,omitempty"`
	ChassisType ChassisChassisType `json:"ChassisType"`

	// Id The unique identifier for this resource within the collection of similar resources.
	Id ResourceId `json:"Id"`

	// Manufacturer The manufacturer of this chassis.
	Manufacturer *string `json:"Manufacturer"`

	// Model The model number of the chassis.
	Model *string `json:"Model"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// SerialNumber The serial number of the chassis.
	SerialNumber *string `json:"SerialNumber"`

	// Status The status and health of a resource and its children.
	Status *ResourceStatus `json:"Status,omitempty"`
}

// ChassisChassisType defines model for Chassis_ChassisType.
type ChassisChassisType string

// ComputerSystemCollectionComputerSystemCollection The collection of `ComputerSystem` resource instances.
type ComputerSystemCollectionComputerSystemCollection struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType   *OdataV4Type                                                  `json:"@odata.type,omitempty"`
	Description *ComputerSystemCollectionComputerSystemCollection_Description `json:"Description,omitempty"`

	// Members The members of this collection.
	Members *[]OdataV4IdRef `json:"Members,omitempty"`

	// MembersOdataCount The number of items in a collection.
	MembersOdataCount *OdataV4Count `json:"Members@odata.count,omitempty"`

	// MembersOdataNextLink The URI to the resource containing the next set of partial members.
	MembersOdataNextLink *OdataV4NextLink `json:"Members@odata.nextLink,omitempty"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`
}

// ComputerSystemCollectionComputerSystemCollectionDescription1 defines model for .
type ComputerSystemCollectionComputerSystemCollectionDescription1 = interface{}

// ComputerSystemCollectionComputerSystemCollection_Description defines model for ComputerSystemCollectionComputerSystemCollection.Description.
type ComputerSystemCollectionComputerSystemCollection_Description struct {
	union json.RawMessage
}

// ComputerSystemComputerSystem The `ComputerSystem` schema represents a computer or system instance and the software-visible resources, or items within the data plane, such as memory, CPU, and other devices that it can access.  Details of those resources or subsystems are also linked through this resource.
type ComputerSystemComputerSystem struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType   *OdataV4Type                              `json:"@odata.type,omitempty"`
	Description *ComputerSystemComputerSystem_Description `json:"Description,omitempty"`

	// Id The unique identifier for this resource within the collection of similar resources.
	Id ResourceId `json:"Id"`

	// Manufacturer The manufacturer or OEM of this system.
	Manufacturer *string `json:"Manufacturer"`

	// Model The product name for this system, without the manufacturer name.
	Model *string `json:"Model"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// PowerState The current power state of the system.
	PowerState *ComputerSystemComputerSystem_PowerState `json:"PowerState,omitempty"`

	// SerialNumber The serial number for this system.
	SerialNumber *string `json:"SerialNumber"`

	// Status The status and health of a resource and its children.
	Status     *ResourceStatus           `json:"Status,omitempty"`
	SystemType *ComputerSystemSystemType `json:"SystemType,omitempty"`
}

// ComputerSystemComputerSystemDescription1 defines model for .
type ComputerSystemComputerSystemDescription1 = interface{}

// ComputerSystemComputerSystem_Description defines model for ComputerSystemComputerSystem.Description.
type ComputerSystemComputerSystem_Description struct {
	union json.RawMessage
}

// ComputerSystemComputerSystemPowerState1 defines model for .
type ComputerSystemComputerSystemPowerState1 = interface{}

// ComputerSystemComputerSystem_PowerState The current power state of the system.
type ComputerSystemComputerSystem_PowerState struct {
	union json.RawMessage
}

// ComputerSystemSystemType defines model for ComputerSystem_SystemType.
type ComputerSystemSystemType string

// ManagerCollectionManagerCollection The collection of `Manager` resource instances.
type ManagerCollectionManagerCollection struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType   *OdataV4Type                                    `json:"@odata.type,omitempty"`
	Description *ManagerCollectionManagerCollection_Description `json:"Description,omitempty"`

	// Members The members of this collection.
	Members *[]OdataV4IdRef `json:"Members,omitempty"`

	// MembersOdataCount The number of items in a collection.
	MembersOdataCount *OdataV4Count `json:"Members@odata.count,omitempty"`

	// MembersOdataNextLink The URI to the resource containing the next set of partial members.
	MembersOdataNextLink *OdataV4NextLink `json:"Members@odata.nextLink,omitempty"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`
}

// ManagerCollectionManagerCollectionDescription1 defines model for .
type ManagerCollectionManagerCollectionDescription1 = interface{}

// ManagerCollectionManagerCollection_Description defines model for ManagerCollectionManagerCollection.Description.
type ManagerCollectionManagerCollection_Description struct {
	union json.RawMessage
}

// ManagerManager In Redfish, a manager is a systems management entity that can implement or provide access to a Redfish service.  Examples of managers are BMCs (baseboard management controllers), enclosure managers, management controllers, and other subsystems that are assigned manageability functions.  An implementation can have multiple managers, which might be directly accessible through a Redfish-defined interface.
type ManagerManager struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *OdataV4Etag `json:"@odata.etag,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType   *OdataV4Type                `json:"@odata.type,omitempty"`
	Description *ManagerManager_Description `json:"Description,omitempty"`

	// FirmwareVersion The firmware version of this manager.
	FirmwareVersion *string `json:"FirmwareVersion"`

	// Id The unique identifier for this resource within the collection of similar resources.
	Id          ResourceId          `json:"Id"`
	ManagerType *ManagerManagerType `json:"ManagerType,omitempty"`

	// Model The model information of this manager, as defined by the manufacturer.
	Model *string `json:"Model"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// Status The status and health of a resource and its children.
	Status *ResourceStatus `json:"Status,omitempty"`
}

// ManagerManagerDescription1 defines model for .
type ManagerManagerDescription1 = interface{}

// ManagerManager_Description defines model for ManagerManager.Description.
type ManagerManager_Description struct {
	union json.RawMessage
}

// ManagerManagerType defines model for Manager_ManagerType.
type ManagerManagerType string

// MessageMessage The message that the Redfish service returns.
type MessageMessage struct {
	// Message The human-readable message.
	Message *string `json:"Message,omitempty"`

	// MessageArgs An array of message arguments that are substituted for the arguments in the message when looked up in the message registry.
	MessageArgs *[]string `json:"MessageArgs,omitempty"`

	// MessageId The identifier for the message.
	MessageId       *string         `json:"MessageId,omitempty"`
	MessageSeverity *ResourceHealth `json:"MessageSeverity,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// RelatedProperties A set of properties described by the message.
	RelatedProperties *[]string `json:"RelatedProperties,omitempty"`

	// Resolution Used to provide suggestions on how to resolve the situation that caused the message.
	Resolution *string `json:"Resolution,omitempty"`

	// ResolutionSteps The list of recommended steps to resolve the situation that caused the message.
	ResolutionSteps *[]ResolutionStepResolutionStep `json:"ResolutionSteps,omitempty"`

	// Severity The severity of the message.
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	Severity *string `json:"Severity,omitempty"`
}

// RedfishError The error payload from a Redfish service.
type RedfishError struct {
	// Error The properties that describe an error from a Redfish service.
	Error struct {
		// MessageExtendedInfo An array of messages describing one or more error messages.
		MessageExtendedInfo *[]MessageMessage `json:"@Message.ExtendedInfo,omitempty"`

		// Code A string indicating a specific `MessageId` from a message registry.
		Code *string `json:"code,omitempty"`

		// Message A human-readable error message corresponding to the message in a message registry.
		Message *string `json:"message,omitempty"`
	} `json:"error"`
}

// ResolutionStepResolutionStep This type describes a recommended step of the service-defined resolution.
type ResolutionStepResolutionStep struct {
	// ActionParameters The parameters of the action URI for a resolution step.
	ActionParameters *[]ResolutionStepResolutionStep_ActionParameters_Item `json:"ActionParameters,omitempty"`

	// ActionURI The action URI for a resolution step.
	ActionURI *string `json:"ActionURI,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// Priority The priority in the set of resolution steps.
	Priority *int64 `json:"Priority"`

	// ResolutionType The type of the resolution step.
	ResolutionType *ResolutionStepResolutionStep_ResolutionType `json:"ResolutionType,omitempty"`

	// RetryCount The number of retries for a resolution step.
	RetryCount *int64 `json:"RetryCount"`

	// RetryIntervalSeconds The interval between retries for a resolution step.
	RetryIntervalSeconds *int64 `json:"RetryIntervalSeconds"`

	// TargetComponentURI The target URI of the component for a resolution step.
	TargetComponentURI *string `json:"TargetComponentURI"`
}

// ResolutionStepResolutionStepActionParameters1 defines model for .
type ResolutionStepResolutionStepActionParameters1 = interface{}

// ResolutionStepResolutionStep_ActionParameters_Item defines model for ResolutionStep_ResolutionStep.ActionParameters.Item.
type ResolutionStepResolutionStep_ActionParameters_Item struct {
	union json.RawMessage
}

// ResolutionStepResolutionStepResolutionType1 defines model for .
type ResolutionStepResolutionStepResolutionType1 = interface{}

// ResolutionStepResolutionStep_ResolutionType The type of the resolution step.
type ResolutionStepResolutionStep_ResolutionType struct {
	union json.RawMessage
}

// ResolutionStepResolutionType defines model for ResolutionStep_ResolutionType.
type ResolutionStepResolutionType string

// ResourceCondition A condition that requires attention.
type ResourceCondition struct {
	// ConditionType The type of condition.
	ConditionType *ResourceCondition_ConditionType `json:"ConditionType,omitempty"`

	// LogEntry A reference to a resource.
	LogEntry *OdataV4IdRef `json:"LogEntry,omitempty"`

	// Message The human-readable message for this condition.
	Message *string `json:"Message,omitempty"`

	// MessageArgs An array of message arguments that are substituted for the arguments in the message when looked up in the message registry.
	MessageArgs *[]string `json:"MessageArgs,omitempty"`

	// MessageId The identifier for the message.
	MessageId *string `json:"MessageId,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// OriginOfCondition A reference to a resource.
	OriginOfCondition *OdataV4IdRef `json:"OriginOfCondition,omitempty"`

	// Resolution Suggestions on how to resolve the condition.
	Resolution *string `json:"Resolution,omitempty"`

	// ResolutionSteps The list of recommended steps to resolve the condition.
	ResolutionSteps *[]ResolutionStepResolutionStep `json:"ResolutionSteps,omitempty"`
	Severity        *ResourceHealth                 `json:"Severity,omitempty"`

	// Timestamp The time the condition occurred.
	Timestamp *time.Time `json:"Timestamp,omitempty"`

	// UserAuthenticationSource The source of authentication for the username property associated with the condition.
	UserAuthenticationSource *string `json:"UserAuthenticationSource"`

	// Username The username of the account associated with the condition.
	Username *string `json:"Username"`
}

// ResourceConditionConditionType1 defines model for .
type ResourceConditionConditionType1 = interface{}

// ResourceCondition_ConditionType The type of condition.
type ResourceCondition_ConditionType struct {
	union json.RawMessage
}

// ResourceConditionType defines model for Resource_ConditionType.
type ResourceConditionType string

// ResourceDescription The description of this resource.  Used for commonality in the schema definitions.
type ResourceDescription = string

// ResourceHealth defines model for Resource_Health.
type ResourceHealth string

// ResourceId The unique identifier for this resource within the collection of similar resources.
type ResourceId = string

// ResourceName The name of the resource or array member.
type ResourceName = string

// ResourceOem The OEM extension.
type ResourceOem map[string]interface{}

// ResourcePowerState defines model for Resource_PowerState.
type ResourcePowerState string

// ResourceResetType defines model for Resource_ResetType.
type ResourceResetType string

// ResourceState defines model for Resource_State.
type ResourceState string

// ResourceStatus The status and health of a resource and its children.
type ResourceStatus struct {
	// Conditions Conditions in this resource that require attention.
	Conditions *[]ResourceStatus_Conditions_Item `json:"Conditions,omitempty"`

	// Health The health state of this resource in the absence of its dependent resources.
	Health *ResourceStatus_Health `json:"Health,omitempty"`

	// HealthRollup The overall health state from the view of this resource.
	HealthRollup *ResourceStatus_HealthRollup `json:"HealthRollup,omitempty"`

	// Oem The OEM extension.
	Oem *ResourceOem `json:"Oem,omitempty"`

	// State The state of the resource.
	State *ResourceStatus_State `json:"State,omitempty"`
}

// ResourceStatusConditions1 defines model for .
type ResourceStatusConditions1 = interface{}

// ResourceStatus_Conditions_Item defines model for Resource_Status.Conditions.Item.
type ResourceStatus_Conditions_Item struct {
	union json.RawMessage
}

// ResourceStatusHealth1 defines model for .
type ResourceStatusHealth1 = interface{}

// ResourceStatus_Health The health state of this resource in the absence of its dependent resources.
type ResourceStatus_Health struct {
	union json.RawMessage
}

// ResourceStatusHealthRollup1 defines model for .
type ResourceStatusHealthRollup1 = interface{}

// ResourceStatus_HealthRollup The overall health state from the view of this resource.
type ResourceStatus_HealthRollup struct {
	union json.RawMessage
}

// ResourceStatusState1 defines model for .
type ResourceStatusState1 = interface{}

// ResourceStatus_State The state of the resource.
type ResourceStatus_State struct {
	union json.RawMessage
}

// ServiceRootServiceRoot The `ServiceRoot` schema describes the root of the Redfish service, located at the '/redfish/v1' URI.  All other resources accessible through the Redfish interface on this device are linked directly or indirectly from the service root.
type ServiceRootServiceRoot struct {
	// OdataContext The OData description of a payload.
	OdataContext *OdataV4Context `json:"@odata.context,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType *OdataV4Type `json:"@odata.type,omitempty"`

	// Chassis A reference to a resource.
	Chassis     *OdataV4IdRef                       `json:"Chassis,omitempty"`
	Description *ServiceRootServiceRoot_Description `json:"Description,omitempty"`

	// Id The unique identifier for this resource within the collection of similar resources.
	Id ResourceId `json:"Id"`

	// Managers A reference to a resource.
	Managers *OdataV4IdRef `json:"Managers,omitempty"`

	// Name The name of the resource or array member.
	Name ResourceName `json:"Name"`

	// RedfishVersion The version of the Redfish service.
	RedfishVersion *string `json:"RedfishVersion,omitempty"`

	// Systems A reference to a resource.
	Systems *OdataV4IdRef `json:"Systems,omitempty"`

	// UUID Unique identifier for a service instance.  When SSDP is used, this value contains the same UUID returned in an HTTP `200 OK` response from an SSDP `M-SEARCH` request during discovery.
	UUID *string `json:"UUID"`
}

// ServiceRootServiceRootDescription1 defines model for .
type ServiceRootServiceRootDescription1 = interface{}

// ServiceRootServiceRoot_Description defines model for ServiceRootServiceRoot.Description.
type ServiceRootServiceRoot_Description struct {
	union json.RawMessage
}

// OdataV4Context The OData description of a payload.
type OdataV4Context = string

// OdataV4Count The number of items in a collection.
type OdataV4Count = int64

// OdataV4Etag The current ETag of the resource.
type OdataV4Etag = string

// OdataV4Id The unique identifier for a resource.
type OdataV4Id = string

// OdataV4IdRef A reference to a resource.
type OdataV4IdRef struct {
	// OdataId The unique identifier for a resource.
	OdataId *OdataV4Id `json:"@odata.id,omitempty"`
}

// OdataV4NextLink The URI to the resource containing the next set of partial members.
type OdataV4NextLink = string

// OdataV4Type The type of a resource.
type OdataV4Type = string

// ComputerSystemResetJSONBody defines parameters for ComputerSystemReset.
type ComputerSystemResetJSONBody struct {
	ResetType *ResourceResetType `json:"ResetType,omitempty"`
}

// ComputerSystemResetJSONRequestBody defines body for ComputerSystemReset for application/json ContentType.
type ComputerSystemResetJSONRequestBody ComputerSystemResetJSONBody

// AsActionInfoParameterTypes returns the union data inside the ActionInfoParameters_DataType as a ActionInfoParameterTypes
func (t ActionInfoParameters_DataType) AsActionInfoParameterTypes() (ActionInfoParameterTypes, error) {
	var body ActionInfoParameterTypes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionInfoParameterTypes overwrites any union data inside the ActionInfoParameters_DataType as the provided ActionInfoParameterTypes
func (t *ActionInfoParameters_DataType) FromActionInfoParameterTypes(v ActionInfoParameterTypes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionInfoParameterTypes performs a merge with any union data inside the ActionInfoParameters_DataType, using the provided ActionInfoParameterTypes
func (t *ActionInfoParameters_DataType) MergeActionInfoParameterTypes(v ActionInfoParameterTypes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsActionInfoParametersDataType1 returns the union data inside the ActionInfoParameters_DataType as a ActionInfoParametersDataType1
func (t ActionInfoParameters_DataType) AsActionInfoParametersDataType1() (ActionInfoParametersDataType1, error) {
	var body ActionInfoParametersDataType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionInfoParametersDataType1 overwrites any union data inside the ActionInfoParameters_DataType as the provided ActionInfoParametersDataType1
func (t *ActionInfoParameters_DataType) FromActionInfoParametersDataType1(v ActionInfoParametersDataType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionInfoParametersDataType1 performs a merge with any union data inside the ActionInfoParameters_DataType, using the provided ActionInfoParametersDataType1
func (t *ActionInfoParameters_DataType) MergeActionInfoParametersDataType1(v ActionInfoParametersDataType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ActionInfoParameters_DataType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ActionInfoParameters_DataType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceDescription returns the union data inside the ChassisCollectionChassisCollection_Description as a ResourceDescription
func (t ChassisCollectionChassisCollection_Description) AsResourceDescription() (ResourceDescription, error) {
	var body ResourceDescription
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceDescription overwrites any union data inside the ChassisCollectionChassisCollection_Description as the provided ResourceDescription
func (t *ChassisCollectionChassisCollection_Description) FromResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceDescription performs a merge with any union data inside the ChassisCollectionChassisCollection_Description, using the provided ResourceDescription
func (t *ChassisCollectionChassisCollection_Description) MergeResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChassisCollectionChassisCollectionDescription1 returns the union data inside the ChassisCollectionChassisCollection_Description as a ChassisCollectionChassisCollectionDescription1
func (t ChassisCollectionChassisCollection_Description) AsChassisCollectionChassisCollectionDescription1() (ChassisCollectionChassisCollectionDescription1, error) {
	var body ChassisCollectionChassisCollectionDescription1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChassisCollectionChassisCollectionDescription1 overwrites any union data inside the ChassisCollectionChassisCollection_Description as the provided ChassisCollectionChassisCollectionDescription1
func (t *ChassisCollectionChassisCollection_Description) FromChassisCollectionChassisCollectionDescription1(v ChassisCollectionChassisCollectionDescription1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChassisCollectionChassisCollectionDescription1 performs a merge with any union data inside the ChassisCollectionChassisCollection_Description, using the provided ChassisCollectionChassisCollectionDescription1
func (t *ChassisCollectionChassisCollection_Description) MergeChassisCollectionChassisCollectionDescription1(v ChassisCollectionChassisCollectionDescription1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ChassisCollectionChassisCollection_Description) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ChassisCollectionChassisCollection_Description) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceDescription returns the union data inside the ComputerSystemCollectionComputerSystemCollection_Description as a ResourceDescription
func (t ComputerSystemCollectionComputerSystemCollection_Description) AsResourceDescription() (ResourceDescription, error) {
	var body ResourceDescription
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceDescription overwrites any union data inside the ComputerSystemCollectionComputerSystemCollection_Description as the provided ResourceDescription
func (t *ComputerSystemCollectionComputerSystemCollection_Description) FromResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceDescription performs a merge with any union data inside the ComputerSystemCollectionComputerSystemCollection_Description, using the provided ResourceDescription
func (t *ComputerSystemCollectionComputerSystemCollection_Description) MergeResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsComputerSystemCollectionComputerSystemCollectionDescription1 returns the union data inside the ComputerSystemCollectionComputerSystemCollection_Description as a ComputerSystemCollectionComputerSystemCollectionDescription1
func (t ComputerSystemCollectionComputerSystemCollection_Description) AsComputerSystemCollectionComputerSystemCollectionDescription1() (ComputerSystemCollectionComputerSystemCollectionDescription1, error) {
	var body ComputerSystemCollectionComputerSystemCollectionDescription1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemCollectionComputerSystemCollectionDescription1 overwrites any union data inside the ComputerSystemCollectionComputerSystemCollection_Description as the provided ComputerSystemCollectionComputerSystemCollectionDescription1
func (t *ComputerSystemCollectionComputerSystemCollection_Description) FromComputerSystemCollectionComputerSystemCollectionDescription1(v ComputerSystemCollectionComputerSystemCollectionDescription1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemCollectionComputerSystemCollectionDescription1 performs a merge with any union data inside the ComputerSystemCollectionComputerSystemCollection_Description, using the provided ComputerSystemCollectionComputerSystemCollectionDescription1
func (t *ComputerSystemCollectionComputerSystemCollection_Description) MergeComputerSystemCollectionComputerSystemCollectionDescription1(v ComputerSystemCollectionComputerSystemCollectionDescription1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ComputerSystemCollectionComputerSystemCollection_Description) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ComputerSystemCollectionComputerSystemCollection_Description) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceDescription returns the union data inside the ComputerSystemComputerSystem_Description as a ResourceDescription
func (t ComputerSystemComputerSystem_Description) AsResourceDescription() (ResourceDescription, error) {
	var body ResourceDescription
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceDescription overwrites any union data inside the ComputerSystemComputerSystem_Description as the provided ResourceDescription
func (t *ComputerSystemComputerSystem_Description) FromResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceDescription performs a merge with any union data inside the ComputerSystemComputerSystem_Description, using the provided ResourceDescription
func (t *ComputerSystemComputerSystem_Description) MergeResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsComputerSystemComputerSystemDescription1 returns the union data inside the ComputerSystemComputerSystem_Description as a ComputerSystemComputerSystemDescription1
func (t ComputerSystemComputerSystem_Description) AsComputerSystemComputerSystemDescription1() (ComputerSystemComputerSystemDescription1, error) {
	var body ComputerSystemComputerSystemDescription1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemComputerSystemDescription1 overwrites any union data inside the ComputerSystemComputerSystem_Description as the provided ComputerSystemComputerSystemDescription1
func (t *ComputerSystemComputerSystem_Description) FromComputerSystemComputerSystemDescription1(v ComputerSystemComputerSystemDescription1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemComputerSystemDescription1 performs a merge with any union data inside the ComputerSystemComputerSystem_Description, using the provided ComputerSystemComputerSystemDescription1
func (t *ComputerSystemComputerSystem_Description) MergeComputerSystemComputerSystemDescription1(v ComputerSystemComputerSystemDescription1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ComputerSystemComputerSystem_Description) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ComputerSystemComputerSystem_Description) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourcePowerState returns the union data inside the ComputerSystemComputerSystem_PowerState as a ResourcePowerState
func (t ComputerSystemComputerSystem_PowerState) AsResourcePowerState() (ResourcePowerState, error) {
	var body ResourcePowerState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourcePowerState overwrites any union data inside the ComputerSystemComputerSystem_PowerState as the provided ResourcePowerState
func (t *ComputerSystemComputerSystem_PowerState) FromResourcePowerState(v ResourcePowerState) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourcePowerState performs a merge with any union data inside the ComputerSystemComputerSystem_PowerState, using the provided ResourcePowerState
func (t *ComputerSystemComputerSystem_PowerState) MergeResourcePowerState(v ResourcePowerState) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsComputerSystemComputerSystemPowerState1 returns the union data inside the ComputerSystemComputerSystem_PowerState as a ComputerSystemComputerSystemPowerState1
func (t ComputerSystemComputerSystem_PowerState) AsComputerSystemComputerSystemPowerState1() (ComputerSystemComputerSystemPowerState1, error) {
	var body ComputerSystemComputerSystemPowerState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComputerSystemComputerSystemPowerState1 overwrites any union data inside the ComputerSystemComputerSystem_PowerState as the provided ComputerSystemComputerSystemPowerState1
func (t *ComputerSystemComputerSystem_PowerState) FromComputerSystemComputerSystemPowerState1(v ComputerSystemComputerSystemPowerState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComputerSystemComputerSystemPowerState1 performs a merge with any union data inside the ComputerSystemComputerSystem_PowerState, using the provided ComputerSystemComputerSystemPowerState1
func (t *ComputerSystemComputerSystem_PowerState) MergeComputerSystemComputerSystemPowerState1(v ComputerSystemComputerSystemPowerState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ComputerSystemComputerSystem_PowerState) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ComputerSystemComputerSystem_PowerState) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceDescription returns the union data inside the ManagerCollectionManagerCollection_Description as a ResourceDescription
func (t ManagerCollectionManagerCollection_Description) AsResourceDescription() (ResourceDescription, error) {
	var body ResourceDescription
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceDescription overwrites any union data inside the ManagerCollectionManagerCollection_Description as the provided ResourceDescription
func (t *ManagerCollectionManagerCollection_Description) FromResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceDescription performs a merge with any union data inside the ManagerCollectionManagerCollection_Description, using the provided ResourceDescription
func (t *ManagerCollectionManagerCollection_Description) MergeResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsManagerCollectionManagerCollectionDescription1 returns the union data inside the ManagerCollectionManagerCollection_Description as a ManagerCollectionManagerCollectionDescription1
func (t ManagerCollectionManagerCollection_Description) AsManagerCollectionManagerCollectionDescription1() (ManagerCollectionManagerCollectionDescription1, error) {
	var body ManagerCollectionManagerCollectionDescription1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromManagerCollectionManagerCollectionDescription1 overwrites any union data inside the ManagerCollectionManagerCollection_Description as the provided ManagerCollectionManagerCollectionDescription1
func (t *ManagerCollectionManagerCollection_Description) FromManagerCollectionManagerCollectionDescription1(v ManagerCollectionManagerCollectionDescription1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeManagerCollectionManagerCollectionDescription1 performs a merge with any union data inside the ManagerCollectionManagerCollection_Description, using the provided ManagerCollectionManagerCollectionDescription1
func (t *ManagerCollectionManagerCollection_Description) MergeManagerCollectionManagerCollectionDescription1(v ManagerCollectionManagerCollectionDescription1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ManagerCollectionManagerCollection_Description) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ManagerCollectionManagerCollection_Description) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceDescription returns the union data inside the ManagerManager_Description as a ResourceDescription
func (t ManagerManager_Description) AsResourceDescription() (ResourceDescription, error) {
	var body ResourceDescription
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceDescription overwrites any union data inside the ManagerManager_Description as the provided ResourceDescription
func (t *ManagerManager_Description) FromResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceDescription performs a merge with any union data inside the ManagerManager_Description, using the provided ResourceDescription
func (t *ManagerManager_Description) MergeResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsManagerManagerDescription1 returns the union data inside the ManagerManager_Description as a ManagerManagerDescription1
func (t ManagerManager_Description) AsManagerManagerDescription1() (ManagerManagerDescription1, error) {
	var body ManagerManagerDescription1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromManagerManagerDescription1 overwrites any union data inside the ManagerManager_Description as the provided ManagerManagerDescription1
func (t *ManagerManager_Description) FromManagerManagerDescription1(v ManagerManagerDescription1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeManagerManagerDescription1 performs a merge with any union data inside the ManagerManager_Description, using the provided ManagerManagerDescription1
func (t *ManagerManager_Description) MergeManagerManagerDescription1(v ManagerManagerDescription1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ManagerManager_Description) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ManagerManager_Description) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsActionInfoParameters returns the union data inside the ResolutionStepResolutionStep_ActionParameters_Item as a ActionInfoParameters
func (t ResolutionStepResolutionStep_ActionParameters_Item) AsActionInfoParameters() (ActionInfoParameters, error) {
	var body ActionInfoParameters
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionInfoParameters overwrites any union data inside the ResolutionStepResolutionStep_ActionParameters_Item as the provided ActionInfoParameters
func (t *ResolutionStepResolutionStep_ActionParameters_Item) FromActionInfoParameters(v ActionInfoParameters) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionInfoParameters performs a merge with any union data inside the ResolutionStepResolutionStep_ActionParameters_Item, using the provided ActionInfoParameters
func (t *ResolutionStepResolutionStep_ActionParameters_Item) MergeActionInfoParameters(v ActionInfoParameters) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResolutionStepResolutionStepActionParameters1 returns the union data inside the ResolutionStepResolutionStep_ActionParameters_Item as a ResolutionStepResolutionStepActionParameters1
func (t ResolutionStepResolutionStep_ActionParameters_Item) AsResolutionStepResolutionStepActionParameters1() (ResolutionStepResolutionStepActionParameters1, error) {
	var body ResolutionStepResolutionStepActionParameters1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResolutionStepResolutionStepActionParameters1 overwrites any union data inside the ResolutionStepResolutionStep_ActionParameters_Item as the provided ResolutionStepResolutionStepActionParameters1
func (t *ResolutionStepResolutionStep_ActionParameters_Item) FromResolutionStepResolutionStepActionParameters1(v ResolutionStepResolutionStepActionParameters1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResolutionStepResolutionStepActionParameters1 performs a merge with any union data inside the ResolutionStepResolutionStep_ActionParameters_Item, using the provided ResolutionStepResolutionStepActionParameters1
func (t *ResolutionStepResolutionStep_ActionParameters_Item) MergeResolutionStepResolutionStepActionParameters1(v ResolutionStepResolutionStepActionParameters1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResolutionStepResolutionStep_ActionParameters_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResolutionStepResolutionStep_ActionParameters_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResolutionStepResolutionType returns the union data inside the ResolutionStepResolutionStep_ResolutionType as a ResolutionStepResolutionType
func (t ResolutionStepResolutionStep_ResolutionType) AsResolutionStepResolutionType() (ResolutionStepResolutionType, error) {
	var body ResolutionStepResolutionType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResolutionStepResolutionType overwrites any union data inside the ResolutionStepResolutionStep_ResolutionType as the provided ResolutionStepResolutionType
func (t *ResolutionStepResolutionStep_ResolutionType) FromResolutionStepResolutionType(v ResolutionStepResolutionType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResolutionStepResolutionType performs a merge with any union data inside the ResolutionStepResolutionStep_ResolutionType, using the provided ResolutionStepResolutionType
func (t *ResolutionStepResolutionStep_ResolutionType) MergeResolutionStepResolutionType(v ResolutionStepResolutionType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResolutionStepResolutionStepResolutionType1 returns the union data inside the ResolutionStepResolutionStep_ResolutionType as a ResolutionStepResolutionStepResolutionType1
func (t ResolutionStepResolutionStep_ResolutionType) AsResolutionStepResolutionStepResolutionType1() (ResolutionStepResolutionStepResolutionType1, error) {
	var body ResolutionStepResolutionStepResolutionType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResolutionStepResolutionStepResolutionType1 overwrites any union data inside the ResolutionStepResolutionStep_ResolutionType as the provided ResolutionStepResolutionStepResolutionType1
func (t *ResolutionStepResolutionStep_ResolutionType) FromResolutionStepResolutionStepResolutionType1(v ResolutionStepResolutionStepResolutionType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResolutionStepResolutionStepResolutionType1 performs a merge with any union data inside the ResolutionStepResolutionStep_ResolutionType, using the provided ResolutionStepResolutionStepResolutionType1
func (t *ResolutionStepResolutionStep_ResolutionType) MergeResolutionStepResolutionStepResolutionType1(v ResolutionStepResolutionStepResolutionType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResolutionStepResolutionStep_ResolutionType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResolutionStepResolutionStep_ResolutionType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceConditionType returns the union data inside the ResourceCondition_ConditionType as a ResourceConditionType
func (t ResourceCondition_ConditionType) AsResourceConditionType() (ResourceConditionType, error) {
	var body ResourceConditionType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceConditionType overwrites any union data inside the ResourceCondition_ConditionType as the provided ResourceConditionType
func (t *ResourceCondition_ConditionType) FromResourceConditionType(v ResourceConditionType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceConditionType performs a merge with any union data inside the ResourceCondition_ConditionType, using the provided ResourceConditionType
func (t *ResourceCondition_ConditionType) MergeResourceConditionType(v ResourceConditionType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResourceConditionConditionType1 returns the union data inside the ResourceCondition_ConditionType as a ResourceConditionConditionType1
func (t ResourceCondition_ConditionType) AsResourceConditionConditionType1() (ResourceConditionConditionType1, error) {
	var body ResourceConditionConditionType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceConditionConditionType1 overwrites any union data inside the ResourceCondition_ConditionType as the provided ResourceConditionConditionType1
func (t *ResourceCondition_ConditionType) FromResourceConditionConditionType1(v ResourceConditionConditionType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceConditionConditionType1 performs a merge with any union data inside the ResourceCondition_ConditionType, using the provided ResourceConditionConditionType1
func (t *ResourceCondition_ConditionType) MergeResourceConditionConditionType1(v ResourceConditionConditionType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResourceCondition_ConditionType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResourceCondition_ConditionType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceCondition returns the union data inside the ResourceStatus_Conditions_Item as a ResourceCondition
func (t ResourceStatus_Conditions_Item) AsResourceCondition() (ResourceCondition, error) {
	var body ResourceCondition
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceCondition overwrites any union data inside the ResourceStatus_Conditions_Item as the provided ResourceCondition
func (t *ResourceStatus_Conditions_Item) FromResourceCondition(v ResourceCondition) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceCondition performs a merge with any union data inside the ResourceStatus_Conditions_Item, using the provided ResourceCondition
func (t *ResourceStatus_Conditions_Item) MergeResourceCondition(v ResourceCondition) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResourceStatusConditions1 returns the union data inside the ResourceStatus_Conditions_Item as a ResourceStatusConditions1
func (t ResourceStatus_Conditions_Item) AsResourceStatusConditions1() (ResourceStatusConditions1, error) {
	var body ResourceStatusConditions1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceStatusConditions1 overwrites any union data inside the ResourceStatus_Conditions_Item as the provided ResourceStatusConditions1
func (t *ResourceStatus_Conditions_Item) FromResourceStatusConditions1(v ResourceStatusConditions1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceStatusConditions1 performs a merge with any union data inside the ResourceStatus_Conditions_Item, using the provided ResourceStatusConditions1
func (t *ResourceStatus_Conditions_Item) MergeResourceStatusConditions1(v ResourceStatusConditions1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResourceStatus_Conditions_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResourceStatus_Conditions_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceHealth returns the union data inside the ResourceStatus_Health as a ResourceHealth
func (t ResourceStatus_Health) AsResourceHealth() (ResourceHealth, error) {
	var body ResourceHealth
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceHealth overwrites any union data inside the ResourceStatus_Health as the provided ResourceHealth
func (t *ResourceStatus_Health) FromResourceHealth(v ResourceHealth) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceHealth performs a merge with any union data inside the ResourceStatus_Health, using the provided ResourceHealth
func (t *ResourceStatus_Health) MergeResourceHealth(v ResourceHealth) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResourceStatusHealth1 returns the union data inside the ResourceStatus_Health as a ResourceStatusHealth1
func (t ResourceStatus_Health) AsResourceStatusHealth1() (ResourceStatusHealth1, error) {
	var body ResourceStatusHealth1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceStatusHealth1 overwrites any union data inside the ResourceStatus_Health as the provided ResourceStatusHealth1
func (t *ResourceStatus_Health) FromResourceStatusHealth1(v ResourceStatusHealth1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceStatusHealth1 performs a merge with any union data inside the ResourceStatus_Health, using the provided ResourceStatusHealth1
func (t *ResourceStatus_Health) MergeResourceStatusHealth1(v ResourceStatusHealth1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResourceStatus_Health) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResourceStatus_Health) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceHealth returns the union data inside the ResourceStatus_HealthRollup as a ResourceHealth
func (t ResourceStatus_HealthRollup) AsResourceHealth() (ResourceHealth, error) {
	var body ResourceHealth
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceHealth overwrites any union data inside the ResourceStatus_HealthRollup as the provided ResourceHealth
func (t *ResourceStatus_HealthRollup) FromResourceHealth(v ResourceHealth) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceHealth performs a merge with any union data inside the ResourceStatus_HealthRollup, using the provided ResourceHealth
func (t *ResourceStatus_HealthRollup) MergeResourceHealth(v ResourceHealth) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResourceStatusHealthRollup1 returns the union data inside the ResourceStatus_HealthRollup as a ResourceStatusHealthRollup1
func (t ResourceStatus_HealthRollup) AsResourceStatusHealthRollup1() (ResourceStatusHealthRollup1, error) {
	var body ResourceStatusHealthRollup1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceStatusHealthRollup1 overwrites any union data inside the ResourceStatus_HealthRollup as the provided ResourceStatusHealthRollup1
func (t *ResourceStatus_HealthRollup) FromResourceStatusHealthRollup1(v ResourceStatusHealthRollup1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceStatusHealthRollup1 performs a merge with any union data inside the ResourceStatus_HealthRollup, using the provided ResourceStatusHealthRollup1
func (t *ResourceStatus_HealthRollup) MergeResourceStatusHealthRollup1(v ResourceStatusHealthRollup1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResourceStatus_HealthRollup) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResourceStatus_HealthRollup) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceState returns the union data inside the ResourceStatus_State as a ResourceState
func (t ResourceStatus_State) AsResourceState() (ResourceState, error) {
	var body ResourceState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceState overwrites any union data inside the ResourceStatus_State as the provided ResourceState
func (t *ResourceStatus_State) FromResourceState(v ResourceState) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceState performs a merge with any union data inside the ResourceStatus_State, using the provided ResourceState
func (t *ResourceStatus_State) MergeResourceState(v ResourceState) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResourceStatusState1 returns the union data inside the ResourceStatus_State as a ResourceStatusState1
func (t ResourceStatus_State) AsResourceStatusState1() (ResourceStatusState1, error) {
	var body ResourceStatusState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceStatusState1 overwrites any union data inside the ResourceStatus_State as the provided ResourceStatusState1
func (t *ResourceStatus_State) FromResourceStatusState1(v ResourceStatusState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceStatusState1 performs a merge with any union data inside the ResourceStatus_State, using the provided ResourceStatusState1
func (t *ResourceStatus_State) MergeResourceStatusState1(v ResourceStatusState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResourceStatus_State) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResourceStatus_State) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsResourceDescription returns the union data inside the ServiceRootServiceRoot_Description as a ResourceDescription
func (t ServiceRootServiceRoot_Description) AsResourceDescription() (ResourceDescription, error) {
	var body ResourceDescription
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceDescription overwrites any union data inside the ServiceRootServiceRoot_Description as the provided ResourceDescription
func (t *ServiceRootServiceRoot_Description) FromResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceDescription performs a merge with any union data inside the ServiceRootServiceRoot_Description, using the provided ResourceDescription
func (t *ServiceRootServiceRoot_Description) MergeResourceDescription(v ResourceDescription) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsServiceRootServiceRootDescription1 returns the union data inside the ServiceRootServiceRoot_Description as a ServiceRootServiceRootDescription1
func (t ServiceRootServiceRoot_Description) AsServiceRootServiceRootDescription1() (ServiceRootServiceRootDescription1, error) {
	var body ServiceRootServiceRootDescription1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromServiceRootServiceRootDescription1 overwrites any union data inside the ServiceRootServiceRoot_Description as the provided ServiceRootServiceRootDescription1
func (t *ServiceRootServiceRoot_Description) FromServiceRootServiceRootDescription1(v ServiceRootServiceRootDescription1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeServiceRootServiceRootDescription1 performs a merge with any union data inside the ServiceRootServiceRoot_Description, using the provided ServiceRootServiceRootDescription1
func (t *ServiceRootServiceRoot_Description) MergeServiceRootServiceRootDescription1(v ServiceRootServiceRootDescription1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ServiceRootServiceRoot_Description) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ServiceRootServiceRoot_Description) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
