# Redfish API Generation Makefile
# This file contains all targets for Redfish API specification processing,
# code generation, and validation.

# Redfish API Generation Variables
MAIN_OPENAPI := openapi/dmtf/openapi.yaml
MERGED_OPENAPI := openapi/merged/redfish-openapi.yaml
GENERATED_SPEC := pkg/api/spec.gen.go
GENERATED_TYPES := pkg/api/types.gen.go
GENERATED_SERVER := pkg/api/server.gen.go
MERGE_SCRIPT := scripts/merge-redfish-openapi.py

# Source YAML files in openapi/dmtf directory
YAML_SOURCES := $(wildcard openapi/dmtf/*.yaml)

# Required tools for Redfish API generation
REDFISH_REQUIRED_TOOLS := python3 go oapi-codegen
REDFISH_OPTIONAL_TOOLS := jq curl swagger-cli
PYTHON_TOOLS := PyYAML

# Tool check functions
define check_tool
$(shell command -v $(1) >/dev/null 2>&1 && echo "‚úÖ" || echo "‚ùå")
endef

define check_python_package
$(shell python3 -c "import $(1)" 2>/dev/null && echo "‚úÖ" || echo "‚ùå")
endef

# OS check function for Ubuntu
define check_ubuntu
	@if [ ! -f /etc/os-release ]; then \
		echo "‚ùå Cannot detect OS. /etc/os-release not found."; \
		echo "üí° Redfish API targets are only supported on Ubuntu systems."; \
		exit 1; \
	fi; \
	if ! grep -qi "ubuntu" /etc/os-release; then \
		echo "‚ùå Redfish API targets are only supported on Ubuntu systems."; \
		echo "üîç Current OS: $$(grep '^PRETTY_NAME=' /etc/os-release | cut -d'=' -f2 | tr -d '\"' || echo 'Unknown')"; \
		echo "üí° Please use an Ubuntu system to run Redfish API generation targets."; \
		exit 1; \
	fi; \
	echo "‚úÖ Ubuntu detected: $$(grep '^PRETTY_NAME=' /etc/os-release | cut -d'=' -f2 | tr -d '\"')"
endef

# HELP =================================================================================================================
# This will output the help for each task
.PHONY: help

help: ## Display this help screen
	@awk 'BEGIN {FS = ":.*##"; printf "\nUsage:\n  make \033[36m<target>\033[0m\n"} /^[a-zA-Z_-]+:.*?##/ { printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2 } /^##@/ { printf "\n\033[1m%s\033[0m\n", substr($$0, 5) } ' $(MAKEFILE_LIST)

##@ Redfish API Generation

rf-merge: ### Merge YAML files into single OpenAPI specification
	$(call check_ubuntu)
	@echo "üîÑ Merging YAML files into single OpenAPI specification..."
	python3 $(MERGE_SCRIPT)
	@echo "‚úÖ Merged OpenAPI spec created: $(MERGED_OPENAPI)"
.PHONY: rf-merge

$(MERGED_OPENAPI): $(YAML_SOURCES) $(MERGE_SCRIPT)
	@echo "üîÑ Merging YAML files into single OpenAPI specification..."
	python3 $(MERGE_SCRIPT)
	@echo "‚úÖ Merged OpenAPI spec created: $(MERGED_OPENAPI)"

rf-generate: $(GENERATED_SPEC) $(GENERATED_TYPES) $(GENERATED_SERVER) ### Generate Go server code from merged OpenAPI spec
	$(call check_ubuntu)
.PHONY: rf-generate

$(GENERATED_SPEC): $(MERGED_OPENAPI)
	$(call check_ubuntu)
	@echo "üîÑ Generating OpenAPI spec Go code..."
	@mkdir -p pkg/api
	oapi-codegen -generate spec -o $(GENERATED_SPEC) -package api $(MERGED_OPENAPI)
	@echo "‚úÖ Generated spec code: $(GENERATED_SPEC)"

$(GENERATED_TYPES): $(MERGED_OPENAPI)
	$(call check_ubuntu)
	@echo "üîÑ Generating types Go code..."
	@mkdir -p pkg/api
	oapi-codegen -generate types -o $(GENERATED_TYPES) -package api $(MERGED_OPENAPI)
	@echo "‚úÖ Generated types code: $(GENERATED_TYPES)"

$(GENERATED_SERVER): $(MERGED_OPENAPI)
	$(call check_ubuntu)
	@echo "üîÑ Generating server Go code..."
	@mkdir -p pkg/api
	oapi-codegen -generate gin,strict-server -o $(GENERATED_SERVER) -package api $(MERGED_OPENAPI)
	@echo "‚úÖ Generated server code: $(GENERATED_SERVER)"

rf-deps: rf-check-tools ### Install dependencies and required tools for Redfish API
	$(call check_ubuntu)
	@echo "üîß Installing and verifying all dependencies..."
	@$(MAKE) rf-install-missing-tools
	@echo "‚úÖ All dependencies installed and verified"
.PHONY: rf-deps

rf-check-tools: ### Check if all required tools are available
	$(call check_ubuntu)
	@echo "üîß Detailed Tool Status Report"
	@echo "==============================="
	@echo ""
	@echo "Required Tools:"
	@missing_tools=""; \
	for tool in $(REDFISH_REQUIRED_TOOLS); do \
		echo -n "  $$tool: "; \
		if command -v $$tool >/dev/null 2>&1; then \
			case $$tool in \
				python3) echo "‚úÖ $$(python3 --version 2>&1)";; \
				go) echo "‚úÖ $$(go version | cut -d' ' -f3-4)";; \
				oapi-codegen) echo "‚úÖ $$(oapi-codegen -version 2>/dev/null || echo 'installed')";; \
				*) echo "‚úÖ installed";; \
			esac; \
		else \
			echo "‚ùå Missing"; \
			missing_tools="$$missing_tools $$tool"; \
		fi; \
	done; \
	echo ""; \
	echo "Optional Tools:"; \
	for tool in $(REDFISH_OPTIONAL_TOOLS); do \
		echo -n "  $$tool: "; \
		if command -v $$tool >/dev/null 2>&1; then \
			case $$tool in \
				jq) echo "‚úÖ $$(jq --version 2>/dev/null || echo 'installed')";; \
				curl) echo "‚úÖ $$(curl --version 2>/dev/null | head -n1 | cut -d' ' -f2 || echo 'installed')";; \
				swagger-cli) echo "‚úÖ $$(swagger-cli --version 2>/dev/null || echo 'installed')";; \
				*) echo "‚úÖ installed";; \
			esac; \
		else \
			echo "‚ö†Ô∏è  Not installed"; \
		fi; \
	done; \
	echo ""; \
	echo "Python Packages:"; \
	echo -n "  PyYAML: "; \
	if python3 -c "import yaml; print('‚úÖ version', yaml.__version__)" 2>/dev/null; then \
		true; \
	else \
		echo "‚ùå Missing"; \
	fi; \
	echo ""; \
	if [ -n "$$missing_tools" ]; then \
		echo "‚ùå Missing required tools:$$missing_tools"; \
		echo "üí° Run 'make rf-deps' to install missing dependencies"; \
		exit 1; \
	else \
		echo "‚úÖ All required tools are available!"; \
	fi
.PHONY: rf-check-tools

rf-install-missing-tools: ### Install missing tools automatically
	$(call check_ubuntu)
	@echo "üõ†Ô∏è  Installing missing tools..."

	# Check and install Go
	@if ! command -v go >/dev/null 2>&1; then \
		echo "‚ùå Go not found. Please install Go first: https://golang.org/doc/install"; \
		exit 1; \
	fi

	# Check and install Python3
	@if ! command -v python3 >/dev/null 2>&1; then \
		echo "Installing Python3..."; \
		if command -v apt-get >/dev/null 2>&1; then \
			sudo apt-get update && sudo apt-get install -y python3 python3-pip; \
		elif command -v yum >/dev/null 2>&1; then \
			sudo yum install -y python3 python3-pip; \
		else \
			echo "‚ùå Please install Python3 manually"; \
			exit 1; \
		fi; \
	fi

	# Install Python packages
	@if ! python3 -c "import yaml" 2>/dev/null; then \
		echo "Installing PyYAML..."; \
		pip3 install PyYAML --user 2>/dev/null || python3 -m pip install PyYAML --user; \
	fi

	# Install oapi-codegen
	@if ! command -v oapi-codegen >/dev/null 2>&1; then \
		echo "Installing oapi-codegen..."; \
		go install github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen@latest; \
	fi

	# Install system tools based on OS
	@if command -v apt-get >/dev/null 2>&1; then \
		echo "Installing system tools (Debian/Ubuntu)..."; \
		sudo apt-get update >/dev/null 2>&1 || true; \
		sudo apt-get install -y jq curl >/dev/null 2>&1 || echo "‚ö†Ô∏è  Some tools may need manual installation"; \
	elif command -v yum >/dev/null 2>&1; then \
		echo "Installing system tools (RHEL/CentOS)..."; \
		sudo yum install -y jq curl >/dev/null 2>&1 || echo "‚ö†Ô∏è  Some tools may need manual installation"; \
	elif command -v brew >/dev/null 2>&1; then \
		echo "Installing system tools (macOS)..."; \
		brew install jq curl 2>/dev/null || echo "‚ö†Ô∏è  Some tools may need manual installation"; \
	else \
		echo "‚ö†Ô∏è  Unknown package manager - please install jq and curl manually"; \
	fi
.PHONY: rf-install-missing-tools

rf-validate: $(MERGED_OPENAPI) ### Validate OpenAPI specification
	$(call check_ubuntu)
	@echo "üîÑ Validating OpenAPI specification..."
	@if command -v swagger-cli >/dev/null 2>&1; then \
		swagger-cli validate $(MERGED_OPENAPI) && echo "‚úÖ OpenAPI spec is valid"; \
	else \
		echo "‚ö†Ô∏è  swagger-cli not found, skipping validation"; \
		echo "üí° Install swagger-cli: npm install -g @apidevtools/swagger-cli"; \
	fi
.PHONY: rf-validate

rf-clean: ### Clean generated files
	@echo "üßπ Cleaning generated files..."
	@rm -f $(GENERATED_SPEC) $(GENERATED_TYPES) $(GENERATED_SERVER) $(MERGED_OPENAPI)
	@echo "‚úÖ Cleaned generated files"
.PHONY: rf-clean

rf-all: rf-merge rf-generate rf-validate ### Run all Redfish API generation steps
	@echo "‚úÖ All Redfish API generation steps completed"
.PHONY: rf-all